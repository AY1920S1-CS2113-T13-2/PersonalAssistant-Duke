status = error
dest = err
name = PropertiesConfig

property.basePath = ./logs
property.filename = exception.log

filter.threshold.type = ThresholdFilter
filter.threshold.level = error

appender.console.type = Console
appender.console.name = ConsoleFile
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = error

appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
appender.rolling.fileName = ${basePath}/${filename}
appender.rolling.filePattern = ${basePath}/error-%d{MM-dd-yy}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%c] - %msg%n
appender.rolling.policies.type = Policies

# Rotate log file every 2 hours
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 2
appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 5


# Auto delete outdated log file
appender.rolling.strategy.delete.type = Delete
# Where the files to be deleted
appender.rolling.strategy.delete.basePath = ${basePath}
# Level under basePath
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifFile.type = IfFileName
# Delete log file if file name matches
appender.rolling.strategy.delete.ifFile.glob = error-*.log.gz
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Keep up to 7 days log
appender.rolling.strategy.delete.ifLastModified.age = 7d

rootLogger.level = error
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = RollingFile
rootLogger.appenderRef.console.ref = ConsoleFile